#!/usr/bin/nodejs
var shell   = require('shelljs'),
    nom     = require('nomnom'),
    sprintf = require('sprintf-js').sprintf,
    util    = require('util'),
    colors  = require('colors'),
    _       = require('underscore'),


    opts = nom.script('deploy')
        .option('bump', {
            abbr:     'b',
            choices:  ['major', 'minor', 'patch'],
            help:     'Version to bump - major, minor or patch',
            required: true
        })
        .option('verbose', {
            abbr:    'v',
            flag:    true,
            help:    'Fill up your terminal',
            default: false
        })
        .option('version', {
            help: 'Specify the new version to use'
        })
        .option('master', {
            abbr:    'm',
            help:    'Target branch for the merge - default \'master\'',
            default: 'master'
        })
        .option('dev', {
            abbr:    'd',
            help:    'Source / topic branch for the merge - default \'dev\'',
            default: 'dev'
        })
        .option('message', {
            help:    'Commit message to use for the merge. {VERSION} will be replaced with the new version',
            default: '{VERSION}'
        })
        .option('origin', {
            help:    'The remote to push master to',
            default: 'origin'
        })
        .parse(),

    dino    = require('./modules/dino'),
    log     = require('./modules/log')('deploy', opts.verbose),
    git     = require('./modules/git')(log),
    tag     = require('./modules/tag');

dino.say('DEPLOYING'.bold + sprintf(' %s to %s:%s', opts.dev, opts.origin, opts.master));

log.debug('Making sure branch %s/%s exists', opts.origin, opts.dev);

log.debug(git.checkoutRemoteBranch(opts.origin, opts.dev));

log.debug(sprintf('Checking out branch %s', opts.master));

log.info(git.checkout(opts.master));

log.debug('Fetching latest changes');

log.info(git.fetchTags(opts.master, opts.origin));

log.debug('Checking out latest changes');

log.info(git.pull(opts.master, opts.origin));

var newTag = opts.version
    ? opts.version
    : function(lastTag) {
        if(!lastTag) {
            log.fatal('No valid tags found and no new version explicitly specified. Tags should have format [v]x.x.x');
            shell.exit(1);
        }

        log.debug(sprintf('Last tag found is %s', lastTag));

        log.debug(sprintf('Doing a %s bump to the version', opts.bump));

        return tag.bump(opts.bump, lastTag);
    } (git.lastTag());

log.debug(sprintf('New tag will be %s', newTag));

log.debug(sprintf('Squashing %s', opts.dev));

git.squashMerge(opts.dev);

var message = opts.message.replace('{VERSION}', newTag),
    author  = git.getAuthor();

log.info(sprintf('Committing with author: %s, message: %s', author, message));

log.info(git.commit(message, author));

log.debug('Tagging new commit...');

git.tag(newTag, newTag, git.lastCommitHash());

log.debug(sprintf('Pushing %s', opts.master));

log.info(git.push(opts.master, opts.origin));

log.debug('Pushing tags');

log.info(git.pushTag(opts.master, opts.origin, newTag));